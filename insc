#!/usr/bin/perl

use strict;
use warnings;

use POSIX qw(strftime);
use Term::ReadKey qw(ReadMode ReadKey);
use IPC::Run3;
use File::Basename qw(basename);
use Getopt::Long
    qw(:config posix_default gnu_compat require_order bundling no_ignore_case);

sub usage;
sub fatal;
sub quit;
sub tty;
sub run;

use constant ITMPL => '%04di.%s';
use constant ETMPL => '%04dz.end';
use constant JTMPL => '%04da.job';
use constant NTMPL => '%04d@.next';

use constant IGLOB => '[0-9][0-9][0-9][0-9]i.*';
use constant NGLOB => '[0-9][0-9][0-9][0-9]@.next';
use constant JGLOB => '[0-9][0-9][0-9][0-9]a.job';
use constant EGLOB => '[0-9][0-9][0-9][0-9]z.end';

use constant PFILE => '0000p';

my $rxpath    = qr{^(\.\.?|\+)$|/};
my $rxnum     = qr{([0-9]+(?:\.[0-9]+)?)};
my $rxrange   = qr{^([0-9]+)(?:-([0-9]*)?)$};
my $rximfile  = qr{^([0-9]{4})i\.([^.]+)(?:\.([^.]+))?$};
my $rxproj    = qr{0000p};

my $prog = 'scanadf';
my $tty;
my @now = localtime;
my ($rcfile, $device, $dryrun, $verbose);
GetOptions(
    'c|config-file=s' => \$rcfile,
    'd|device=s' => \$device,
    'n|dry-run' => \$dryrun,
    'v|verbose' => \$verbose,
) or usage;

my %cmd = map { /^cmd_(.+)/ ? ($1 => main->can($_)) : () } keys %main::;

my ($mode, $source, $dpi, $paper, $width, $height, @path, %prop, %opt);
my @params = qw( gray 200dpi 215.889x279.400 adf );

($rcfile) = grep -e, map { glob $_ } qw(~/etc/insc/insc.conf ~/.inscrc /usr/local/insc/insc.conf /etc/insc/insc.conf /dev/null)
    if !defined $rcfile;
my %config = %{ kvread($rcfile) };
push @params, split /\s+/, $config{'params'} if defined $config{'params'};

$device //= $config{'device'} // $ENV{'INSC_DEVICE'} // $ENV{'SANE_DEFAULT_DEVICE'};
my $root  = $config{'root' }  // $ENV{'INSC_ROOT' } // glob('~/etc/insc') // '/usr/local/insc';
my $spool = $config{'spool'}  // $ENV{'INSC_SPOOL'} // glob('~/var/insc') // '/var/local/insc';

# --- Global variables

#chdir $root or fatal;

my $cmd = \&cmd_scan;
if (@ARGV) {
    $cmd = $cmd{shift @ARGV} if $cmd{$ARGV[0]};
    $ARGV[0] =~ s{^%}{$root/projects/} if @ARGV;
}
$cmd->();

# --- Commands

sub cmd_init {
    parse(@params, @ARGV);
    my $path = path(@path);
    init($path);
    print $path, "\n";
}

sub cmd_scan {
    @ARGV = ( '@default', '+' ) if !@ARGV;
    my $path = shift @ARGV;
    if (! -e proj($path)) {
        if (-t) {
            print STDERR "Create a project in $path? [yN] ";
            exit if <STDIN> !~ /^[Yy]/;
        }
        init($path);
    }
    chdir $path or fatal "Can't chdir $path: $!";
    my $proj = kvread(PFILE);
    parse(split /\s+/, $proj->{'params'}) if defined $proj->{'params'};
    parse(@ARGV);
    fatal "Stray bits at end of args: @path" if @path;
    scan($path, $proj);
}

sub cmd_merge {
    #@ merge %PROJECT|/PATH FIRSTJOB [LASTJOB]
    my $path = path(shift @ARGV);
    chdir $path or fatal "Can't chdir $path: $!";
    @ARGV = qw(-2) if !@ARGV;
    my ($f, $l) = @ARGV[0,-1];
    my @jobs = jobs();
    my $njobs = scalar @jobs;
    if (@ARGV > 1) {
        $f = $njobs + $f + 1 if $f < 0;
        $l = $njobs + $l + 1 if $l  < 0;
        usage if $f < 1 || $f >= $njobs || $l > $njobs || $l <= $f;
    }
    elsif ($ARGV[0] < 0) {
        $f = $njobs + $ARGV[0] + 1;
        $l = $njobs;
    }
    else {
        usage;
    }
    @jobs = @jobs[$f-1..$l-1];
    my ($fjob, $ljob) = @jobs[0,-1];
    my @jfiles = map { jfile($_->{'first'}) } @jobs;
    my @efiles = map { efile($_->{'last' }) } @jobs;
    # Determine the title of the merged job
    my @titles;
    foreach my $job (@jobs) {
        push @titles, $job->{'prop.title'} if defined $job->{'prop.title'};
    }
    @titles = unique(@titles);
    my ($t) = @titles;
    if (@titles != 1) {
        my $n = 0;
        tty "Choose a title, type a new one, or enter Q to cancel:\n\n";
        tty sprintf "%4d : %s\n", $n++, $_ for @titles;
        tty "\nYour choice: ";
        $t = <$tty>;
        chomp $t;
        quit 'Cancelled' if $t =~ /^[Qq]$/;
        $t =~ s{^[0-9]+$}{$titles[$t] // quit 'Cancelled'}e;
    }
    # Write new *.job
    $fjob->{'prop.title'} = $t;
    $fjob->{'last'} = $ljob->{'last'};
    kvwrite(shift @jfiles, $fjob);
    # Write new *.end
    my $lend = kvread($efiles[-1]);
    $lend->{'first'} = $fjob->{'first'};
    $lend->{'count'} = $ljob->{'last'} - $fjob->{'first'} + 1;
    kvwrite(pop @efiles, $lend);
    # Delete stuff in between
    unlink @jfiles, @efiles or fatal "Merge failed: $!";
}

sub cmd_flop {
    #@ flop %PROJECT|/PATH [JOB]
    my $path = path(shift @ARGV);
    chdir $path or fatal "Can't chdir $path: $!";
    @ARGV = qw(-1) if !@ARGV;
    usage if @ARGV != 1;
    my ($j) = @ARGV;
    usage if $j !~ /^-?[1-9][0-9]*$/;
    my @jobs = jobs();
    fatal "No such job: $j" if $j > @jobs || $j < -@jobs;
    my $job = $jobs[$j < 0 ? $j : $j - 1];
    my @i = ( $job->{'first'} .. $job->{'last'} );
    fatal "Flopping fewer than 3 images doesn't make sense\n"
        if @i < 3;
    my @ifiles = map { iglob($_) } @i;
    flop(@ifiles);
}

sub cmd_jobs {
    usage if @ARGV != 1;
    usage if $ARGV[0] !~ $rxpath;
    my $path = path(shift @ARGV);
    chdir $path or fatal "Can't chdir: $!";
    my $n = 0;
    print "Job#  1st Last Date       Title\n---- ---- ---- ---------- ---------------------------------------------\n" if $verbose;
    foreach my $job (jobs()) {
        $n++;
        my $title = $job->{'prop.title'} // '(untitled)';
        if ($verbose) {
            printf "%4d %4d %4d %04d-%02d-%02d %s\n", $n, $job->{'first'}, $job->{'last'}, ymd($job->{'date'}), $title;
        }
        else {
            printf "%4d %4d %4d %s\n", $n, $job->{'first'}, $job->{'last'}, $title;
        }
    }
}

sub cmd_lj { goto &cmd_jobs }

sub cmd_find {
    usage if @ARGV < 1;
    usage if $ARGV[0] !~ $rxpath;
    my $path = path(shift @ARGV);
    chdir $path or fatal "Can't chdir: $!";
    @ARGV = map { num($_) } glob(IGLOB) if !@ARGV;
    my @images = map { iglob($_) } @ARGV;
    foreach (@images) {
        print("$path/$_\n"), next if -e;
        my $xz = $_ . '.xz';
        fatal "Can't find image $_" if ! -e $xz;
        print STDERR "Decompressing $_\n";
        fatal "Can't unxz $xz: $!" if system('unxz', $xz) != 0;
        print "$path/$_\n";
    }
}

sub cmd_view {
    usage if @ARGV < 1;
    usage if $ARGV[0] !~ $rxpath;
    my $path = path(shift @ARGV);
    chdir $path or fatal "Can't chdir: $!";
    @ARGV = map { num($_) } glob(IGLOB) if !@ARGV;
    my @images = map { iglob($_) } @ARGV;
    foreach (@images) {
        next if -e;
        my $xz = $_ . '.xz';
        fatal "Can't find image $_" if ! -e $xz;
        print STDERR "Decompressing $_\n";
        fatal "Can't unxz $xz: $!" if system('unxz', $xz) != 0;
    }
    system 'sxiv', @images;
}

sub cmd_make {
    usage if !@ARGV || $ARGV[0] !~ m{^(\.\.?)$|/|\.pdf$};
    my (%dest2images, $dest, @images);
    my $path = path(shift @ARGV);
    if ($path =~ s/\.pdf$//) {
        # insc make $projdir.pdf
        usage if @ARGV;
        fatal "Not a project: $path" if !-e proj($path);
        @images = glob(IGLOB);
        $dest2images{"$path.pdf"} = \@images;
    }
    chdir $path or fatal "Can't chdir $path: $!";
    while (@ARGV) {
        my $arg = shift @ARGV;
        if ($arg =~ /^(\d+)(?:-(\d+))(\.pdf)?$/) {
            # insc make $projdir 1-7
            # insc make $projdir 1-7.pdf
            my @i = map { iglob($_) } $1 .. ($2||$1);
            $arg .= '.pdf' if !defined $3;
            if ($arg !~ m{/}) {
                $arg = "made/$arg";
                -d 'made' or mkdir 'made' or fatal "Can't mkdir made: $!";
            }
            $dest2images{$arg} = \@i;
        }
        elsif ($arg =~ /^\.pdf$/) {
            # insc make $projdir .pdf
            usage if %dest2images || @ARGV;
            $dest2images{"$path.pdf"} = \@images;
        }
        elsif ($arg =~ /\.pdf$/) {
            # insc make $anydir/$anyfile.pdf [image...]
            $dest2images{$arg} = \@images;
            foreach (@ARGV) {
                usage if !/^(\d+)(?:-(\d+))?$/;
                push @images, map { iglob($_) } $1 .. ($2||$1);
            }
            last;
        }
        else {
            usage;
        }
    }
    @images = glob(IGLOB) if !@images;
    $dest2images{$dest} = \@images if !%dest2images;
    my $err = 0;
    while (my ($d, $i) = each %dest2images) {
        fatal "Won't overwrite $d" if -e $d;
        my @cmd = ('gm', 'convert', @$i, $d);
        dryrun(@cmd), next if $dryrun;
        run3 @cmd, \undef, \undef, \undef;
        $err ||= $?;
    }
    fatal "make failed: $!" if $err;
}

sub cmd_show {
    parse(@params, @ARGV);
    my $path = path(@path);
    my $params = params2str();
    if (-d $path) {
        chdir $path or fatal "Can't chdir $path: $!";
        my $proj = kvread(PFILE);
        $params = $proj->{'params'};
        my $proj_title = $proj->{'prop.title'} // '(untitled)';
        print <<"EOS";
path = $path
params = $params
project = $proj_title
EOS
        if (%prop) {
            print "props {\n";
            foreach my $k (sort keys %prop) {
                my $v = $prop{$k};
                print "  $k = $v\n";
            }
            print "}\n";
        }
        foreach my $job (jobs()) {
            my ($b, $e) = @$job{qw(first last)};
            my $n = $b == $e ? $b : "$b-$e";
            my $t = $job->{'prop.title'} // '(untitled)';
            $params = $job->{'params'};
            print <<"EOS";
job $n {
    title = $t
    params = $params
}
EOS
        }
    }
    else {
        print <<"EOS";
path = $path
params = $params
EOS
    }
}
    
sub cmd_lp {
    my ($long);
    GetOptions(
        'l' => \$long,
    ) or usage;
    chdir "$root/projects" or fatal "Can't chdir $root/projects: $!";
    my @out;
    my @dirs = grep { -d "$_/" } glob('*');
    @dirs = qw(.) if !@dirs;
    run3 [ qw(find -H), @dirs, -name => PFILE ], \undef, \@out, \undef;
    fatal "failed: ", $? >> 8 if $?;
    chomp @out;
    foreach (sort @out) {
        my ($path) = m{(.+)/$rxproj$};
        if ($long) {
            my $proj = kvread($_);
            printf qq{%s "%s"\n}, $path, $proj->{'prop.title'} // '(untitled)';
            my @jobs = jobs($path);
            foreach my $job (@jobs) {
                my $n = $job->{'last'} - $job->{'first'} + 1;
                printf qq{  %4d .. %4d %s "%s"\n}, $job->{'first'}, $job->{'last'}, $job->{'date'}, $job->{'prop.title'} // '(untitled)';
            }
            print "\n";
        }
        else {
            print $path, "\n";
        }
    }
}
    
# --- Other functions

sub init {
    my ($path) = @_;
    -d $path or mkdir $path or fatal "Can't mkdir $path: $!";
    chdir $path or fatal "Can't chdir $path: $!";
    my %proj = ( 'params' => params2str(), props() );
    kvwrite(PFILE, \%proj);
    return \%proj;
}

sub iglob {
    my ($num) = @_;
    glob(ifile($num, '*'));
}

sub ifile {
    my ($num, $ext) = @_;
    sprintf ITMPL, $num, $ext // 'pnm';
}

sub jfile {
    my ($num) = @_;
    sprintf JTMPL, $num;
}

sub efile {
    my ($num) = @_;
    sprintf ETMPL, $num;
}

sub proj {
    join('/', @_, PFILE);
}

sub ymd {
    return qw(0000 00 00) if shift() !~ /^([0-9]{4})-?([0-9]{2})-?([0-9]{2})/;
    return ($1, $2, $3);
}

sub tty {
    if (!defined($tty)) {
        open $tty, '+<', '/dev/tty' or fatal "Can't open tty: $!";
    }
    print $tty @_ if @_;
    return $tty;
}

sub ask {
    my ($label, $rx, $default) = @_;
    fatal "Can't ask for $label" if !-t STDIN;
    while (1) {
        tty ucfirst($label), ': ';
        local $_ = <$tty>;
        if (defined $_) {
            chomp;
            return $default if !length && defined $default;
            return $_ if !defined $rx;
            return $_ if $_ =~ /$rx/;
        }
        else {
            return $default;
        }
    }
}

sub askbool {
    my $msg = @_ ? shift : '?';
    tty $msg, ' ';
    ReadMode 'cbreak';
    local $_ = ReadKey 0;
    ReadMode 'normal';
    tty "\n";
    return /^[Yy]/;
}

sub scan {
    my ($path, $proj) = @_;
    $prop{'title'} //= ask('title', qr/./);
    my @previously = all_images();
    my $i = next_image_num();
    ($width, $height) = paper($paper) if defined $paper;
    my %job = (
        'user' => (getpwuid($<))[0],
        'date' => strftime('%Y%m%dT%H%M%S%z', @now),
        'params' => params2str(),
        props(),
    );
    kvwrite(jfile($i), \%job);
    my $source_arg = source2arg($source);
    my $mode_arg = mode2arg($mode);
    my @device = (defined $device ? (-d => $device) : ());
    my @flatbed = (
        $source eq 'flatbed'
            ? ('-e' => $i, '--source' => 'flatbed')
            : ()
    );
    (my $out = ITMPL) =~ s/\.%s/.pnm/;
    while (1) {
        my @cmd = (
            $prog,
            @device,
            -o => $out,
            -x => $width,
            -y => $height,
            '--resolution' => $dpi,
            '--mode' => $mode_arg,
            '--source' => $source_arg,
            '--scan-script' => 'xz',
            -s => $i,
            @flatbed,
        );
        dryrun(@cmd), exit if $dryrun;
        askbool('Press any key when ready...') if $opt{'prompt'};
        run3 \@cmd, \undef, \undef, \undef;
        my ($err, $msg) = ($?, $!);
        fatal "scan failed: $msg" if $err;
        $i = next_image_num();
        last;
    }
    my %scanned = map { $_ => 1 } all_images();
    delete @scanned{@previously};
    my @newly = sort { $a <=> $b } keys %scanned;
    if (@newly) {
        my $first = $newly[0];
        my $last = $newly[-1];
        my %end = (
            'first' => $first,
            'last' => $last,
            'count' => scalar(@newly),
        );
        kvwrite(efile($newly[-1]), \%end);
        my %pid2num;
        foreach my $n (@newly) {
            my $pid = spawn(qw(gm convert), ifile($n), ifile($n, 'png'));
            $pid2num{$pid} = $n;
        }
        my @err;
        while (my $pid = wait) {
            last if $pid < 0;
            my $err = $?;
            my $n = delete $pid2num{$pid};
            my $png = ifile($n, 'png');
            if ($err == 0 && -s $png) {
                unlink ifile($n);
            }
            else {
                unlink $png if -e $png;
                push @err, $n;
            }
        }
        fatal "Scan errors: @err" if @err;
        fatal "Scan failed strangely" if keys %pid2num;
        print join(' ', @newly), "\n";
    }
}

sub dryrun {
    print join(' ', map { quote($_) } @_), "\n";
}

sub props { map { ("prop.$_" => $prop{$_}) } keys %prop }
sub params2str { join(' ', $mode, $dpi.'dpi', $paper || ($width.'x'.$height), $source) }

sub parse {
    my @list = @_;
    while (@list) {
        local $_ = shift @list;
        if (/^@/) {
            my $p = "$root/profiles/" . substr($_,1);
            my $profile = kvread($p);
            unshift @list, $profile->{'path'} if defined $profile->{'path'};
            unshift @list, split /\s+/, $profile->{'params'} if defined $profile->{'params'};
        }
        elsif (/^%/) {
            my $p = "$root/projects/" . substr($_,1);
            unshift @list, $p;
        }
        elsif (/^(bw|gray|color)$/i) {
            $mode = lc $_;
        }
        elsif (/^(flatbed|adf|duplex)$/) {
            $source = lc $1;
        }
        elsif (/^([0-9]+)dpi$/) {
            $dpi = $1;
        }
        elsif (/^(letter|legal|a4)$/) {
            $paper = $_;
            undef $width;
            undef $height;
        }
        elsif (/^${rxnum}x${rxnum}(in|cm|mm)?$/) {
            my $mul = defined $3 ? multiplier($3) : 1;
            ($width, $height) = ($1 * $mul, $2 * $mul);
            undef $paper;
        }
        elsif (/^([^=]+)=(.*)$/) {
            $prop{$1} = $2;
        }
        elsif ($_ =~ $rxpath) {
            push @path, $_;
        }
        elsif (/^([-+])(\S+)/) {
            $opt{$2} = ($1 eq '+');
        }
        else {
            fatal "Unrecognized: $_";
        }
    }
}

sub jobs {
    my ($dir) = @_;
    my $pfx = defined($dir) ? "$dir/" : '';
    my @j = map { num($_) } sort glob($pfx.JGLOB);
    my @e = map { num($_) } sort glob($pfx.EGLOB);
    my @jobs;
    foreach my $j (@j) {
        last if !defined(my $e = shift @e);
        my $job = kvread($pfx.jfile($j));
        $job->{'first'} = $j;
        $job->{'last'} = $e;
        push @jobs, $job;
    }
    return @jobs;
}

sub multiplier {
    my %mul = qw(
        in  25.4
        cm  10.0
        mm   1.0
    );
    return $mul{lc shift()} || usage;
}

sub kvread {
    my ($f) = @_;
    my %hash;
    open my $fh, '<', $f or fatal "Can't open $f: $!";
    while (<$fh>) {
        next if /^\s*(#.*)?$/;
        /^\s*([^\s=]+)\s*(?:=\s*)?(.*)$/
            or fatal "Bad line in profile $f $_";
        $hash{$1} = $2;
    }
    return \%hash;
}

sub kvwrite {
    my ($f, $hash) = @_;
    open my $fh, '>', $f or fatal "Can't open $f: $!";
    while (my ($k, $v) = each %$hash) {
        print $fh "$k = $v\n";
    }
}

sub path {
    my $path = $spool;
    foreach (map glob, @_) {
        if (/^\+/) {
            $path .= "/$_";
        }
        else {
            $path = $_;
        }
    }
    $path =~ s{/(?:\+/)+}{/}g;
    $path =~ s{(?<=/)\+$}{randhex()}e;
    $path =~ s/%([A-Za-z]|\([^()]+\))/expand($1)/eg;
    return $path;
}

sub expand {
    my ($str) = @_;
    if ($str =~ /^[YmdHMS]$/) {
        return strftime('%'.$str, @now);
    }
    elsif ($str =~ /^\((.+)\)$/ && defined $prop{$1}) {
        return $prop{$1};
    }
    fatal "Can't expand: $str";
}

sub randhex {
    my ($fh, $buf);
    if (open $fh, '<', '/dev/random' and sysread $fh, $buf, 4) {
        return unpack('H7', $buf);
    }
    else {
        my $r = int(rand(0x0fffffff)) ^ int(rand(~0x0fffffff)) & 0x0fffffff;
        printf "%07x\n", $r;
    }
}

sub all_images {
    my @i = sort glob IGLOB;
    s/$rximfile/$1/o for @i;
    return map { $_ + 0 } @i;
}

sub next_image_num {
    my @i = sort glob IGLOB;
    return 1 if !@i;
    s/$rximfile/$1/o for @i;
    return $i[-1] + 1;
}

sub mode2arg {
    my %mode = qw( bw Lineart gray Gray grey Gray color Color colour Color );
    $mode{lc shift}
}

sub source2arg {
    my %source = ( 'adf' => 'ADF', 'duplex' => 'ADF Duplex', 'flatbed' => 'Flatbed' );
    $source{lc shift}
}

sub paper {
    my %dimens = (
        # ISO paper sizes
        'a5' => [ 148, 210 ],
        'a4' => [ 210, 297 ],
        'a3' => [ 297, 420 ],
        # U.S. paper sizes
        'letter'  => [  8.5*25.4, 11.0*25.4 ],
        'legal'   => [  8.5*25.4, 14.0*25.4 ],
        'tabloid' => [ 11.0*25.4, 17.0*25.4 ],
    );
    return @{ $dimens{lc shift} || usage };
}

sub num {
    return $1 + 0 if shift() =~ m{(?:.+/)?(\d+)};
    return 0;
}

sub run {
    my ($in, $out, $err) = @_;
    run3 [@_], \$in, \$out, \$err;
    system @_;
    return $? >> 8;
}

sub quote {
    local $_ = shift;
    return $_ if !/[\s\\"']/;
    return qq{'$_'} if !/[\\']/;
    s/(["\\])/\\$1/g;
    return qq{"$_"};
}

sub unique {
    my (%u, @u);
    foreach (@_) {
        push @u, $_ if !$u{$_}++;
    }
    return @u;
}

sub sum {
    my $n = 0;
    $n += $_ for @_;
    return $n;
}

sub flop {
    my @i = @_;
    my @odd = splice @i, 0, int((@i+1) / 2);
    my @flopped = map {
        @i ? ($_, pop @i)
           : ($_)
    } @odd;
    my @moved;
    -d 'tmp' or mkdir 'tmp' or fatal "mkdir tmp: $!";
    foreach (@flopped) {
        my $f = shift;
        next if $_ eq $f;
        printf STDERR "%s -> %s\n", $_, $f;
        rename $_, "tmp/$f";
        push @moved, $f;
    }
    foreach my $f (@moved) {
        rename "tmp/$f", $f;
    }
    # rmdir "$dir/tmp";
}

sub spawn {
    my $pid = fork;
    die "Cannot fork: $!\n" unless defined $pid;
    return $pid if $pid;
    close STDIN; close STDOUT; close STDERR;
    exec @_;
}

sub fatal {
    print STDERR 'insc: ', $_, "\n" for @_;
    exit 2;
}

sub quit {
    print STDERR $_, "\n" for @_;
    exit 0;
}

